  -- Migrate to Vue/Vuetify
    -- Migrate the implemented frontend part to Vue - OK
    -- Use `readonly` for the constructed common types, and also `public` - OK
    -- Use Vuetify for Google Material design - OK

    -- Use ReadonlyArray?
    -- Use strict checks
    -- Change the directory structure from src/{ui, server} to {ui, server}/src
    -- Use real Vue typings
    -- Do not include web manifest and do not use service workers?
    -- Consider using vuex-class for vuex decorators
    -- Use more Typescript friendly implementation of Vuex which would preserve types? Property decorators?
    -- Use runtime verification of the JSON object type which has been deserialized? Performance implications?

  -- Simulation controls
    -- Enable starting the simulation, it does not start unless a button is pressed - OK
    -- Enable stopping the simulation - OK
    -- Enable pausing and resuming the simulation
    -- Enable and disable action buttons based on the simulation state

  -- Visualize the statistics in the frontend, show total numbers and a chart
    -- Also measure the speed of movement ~ economic activity over time
    -- Measure the world population (total number of live persons)
    -- Display charts with the statistics about the development of the situation real-time, show elapsed time
    -- Also display not just the current confirmed active cases, but all the confirmed cases up to date
    -- Show daily metrics and 7 day running average (separate chart):
       -- Number of new cases
       -- Number of new acute cases
       -- Number of new IC cases

  -- Visualize simulation parameters and the state transitions
    -- Enable tuning the simulation parameters on the visualized graph of state transitions, consider using https://github.com/cytoscape/cytoscape.js-popper,
       custom controls for defining the params of the simulation
       Use plain D3 with editable text attributes?
    -- Enable tuning the simulation parameters on the visualized graph of state transitions

    -- Show the visualization of the state transitions (legend with the used colors)
  -- How to speed up the simulation? Should there be + and - buttons to regulate the speed?
  -- Consider using multiple threads in the Node.js backend

-- Use core.js or Underscore.js
-- Write unit tests for the server and frontend, use Typescript to write tests
  -- Add first unit tests for the SimulationActions component
  -- In the backend add unit tests for the state transitions, modularize the code

-- Implement controls for various restrictive actions
  -- Movement restrictions
  -- Limiting interaction range (i.e. "anderhalvemetereconomie")
  -- Quarantine of infected persons
  -- Tracking down exposed persons and quarantining them

- Simulate different scenarios:
  -- Very infectious disease which is quite mild
  -- Disease which is less infectious (harder to transmit), but is serious
  -- Simulate the effect of population density
  -- Simulate the effect of quarantining and isolating the infected persons (one parameter - probability that an infected person is found after each step of a simulation)
  -- Simulate the effect of quarantining the potentially infected persons (those whom the infected person encountered) (probability based discovery)
  -- Simulate the effect of movement restrictions when persons move only around a very small area around them, simulate not all the persons following the guidelines
  -- Simulate limiting the interaction range?
  -- Simulate the effect of the immunity:
    -- no immunity against a disease is possible
    -- short lived immunity against the disease
    -- medium immunity against the disease
    -- long term immunity against the disease
  -- Given the COVID-19 like parameters would it economically make more sense to place movement restrictions in the beginning of the epidemic?
     i.e. the reduction in the economic activity due to the 20% of the population being in a hospital (Accute or IntensiveCare) is it comparable with the reduction
     due to the policy of movement restriction?
  -- Simulate natural birth and death rates for the epidemics that reccur once in a while

- More simulations
  -- Simulate different age groups and separate disease parameters in them

- Record the history of the simulation/make the simulation replayable

- Questions:

  -- What is the maximum speed at which the disease would not spread anymore: i.e. R0 less that 1, sick people would recover faster than would transmit disease

- Tests

-- Responsive view

-- Deploy to Heroku

-- Use storybook for components?
-- Write end-to-end tests with Cypress?
-- Measure the day by day metrics, for example "number of newly infected persons per day", "R0 of the virus: the ability to spread"