- Basic simulation
  -- Display population on the screen - OK
  -- Persons can move - OK
  -- Extract the simulation part into a backend which would communicate via WebSockets with frontend - OK
  -- Separate the code into modules/introduce a module bundler? - OK
  -- Some fixed number of persons are infected in the beginning and move, different color - OK
  -- After a certain time an infected person becomes contagious - OK
  -- Disease gets transferred to healthy encountered persons from contagious persons with a certain probability - OK
  -- Optimize the algorithm for checking for encounters? - OK
  -- With a certain probability contagious person can become accute - OK
  -- After a certain amount of time elapses with a certain probability person can recover and become immune - OK
  -- When person becomes accute with a certain probability a person can become dead - OK
  -- After a certain amount of time elapses immune person might loose immunity with a certain probability and will become healthy - OK
  -- Gather statistics about the epidemic progress at each step and send it to the frontend - OK

  -- Migrate to Vue/Vuetify
    -- Migrate the implemented frontend part to Vue - OK
    -- Use `readonly` for the constructed common types, and also `public`

    -- Change the directory structure from src/{ui, server} to {ui, server}/src
    -- Use real Vue typings
    -- Use Vuetify for Google Material design
    -- Do not include web manifest and do not use service workers?
    -- Consider using vuex-class for vuex decorators
    -- Use more Typescript friendly implementation of Vuex which would preserve types? Property decorators?
    -- Use runtime verification of the JSON object type which has been deserialized? Performance implications?

  -- Visualize the statistics in the frontend, show total numbers and a chart
    -- Also measure the speed of movement ~ economic activity over time
    -- Measure the world population (total number of live persons)
    -- Display charts with the statistics about the development of the situation real-time, show elapsed time
    -- Also display not just the current confirmed active cases, but all the confirmed cases up to date

  -- Visualize simulation parameters

  -- Add unit tests for the state transitions, modularize the code
  -- Show the visualization of the state transitions (legend with the used colors)
  -- How to speed up the simulation? Using multiple threads in the Node.js backend

-- Use core.js or Underscore.js
-- Write unit tests for the server and frontend, use Typescript to write tests

  -- Make simulation parameters configurable, enable simulation restart, enable starting, stopping & resuming

- Simulate different scenarios:
  -- Very infectious disease which is quite mild
  -- Disease which is less infectious (harder to transmit), but is serious
  -- Simulate the effect of population density
  -- Simulate the effect of quarantining and isolating the infected persons (one parameter - probability that an infected person is found after each step of a simulation)
  -- Simulate the effect of quarantining the potentially infected persons (those whom the infected person encountered) (probability based discovery)
  -- Simulate the effect of movement restrictions when persons move only around a very small area around them, simulate not all the persons following the guidelines
  -- Simulate limiting the interaction range?
  -- Simulate the effect of the immunity:
    -- no immunity against a disease is possible
    -- short lived immunity against the disease
    -- medium immunity against the disease
    -- long term immunity against the disease
  -- Given the COVID-19 like parameters would it economically make more sense to place movement restrictions in the beginning of the epidemic?
     i.e. the reduction in the economic activity due to the 20% of the population being in a hospital (Accute or IntensiveCare) is it comparable with the reduction
     due to the policy of movement restriction?
  -- Simulate natural birth and death rates for the epidemics that reccur once in a while

- More simulations
  -- Simulate different age groups and separate disease parameters in them

- Record the history of the simulation/make the simulation replayable

- Questions:

  -- What is the maximum speed at which the disease would not spread anymore: i.e. R0 less that 1, sick people would recover faster than would transmit disease

- Tests

-- Responsive view

-- Deploy to Heroku